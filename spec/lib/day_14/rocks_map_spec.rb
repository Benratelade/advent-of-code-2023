# frozen_string_literal: true

require "day_14/rocks_map"
require "pry"

RSpec.describe RocksMap do
  describe "#initialize" do
    it "creates a matrix based on the string" do
      rocks_map = RocksMap.new(
        <<~ROCKS_MAP,
          O....#....
          O.OO#....#
          .....##...
          OO.#O....O
          .O.....O#.
          O.#..O.#.#
          ..O..#O..O
          .......O..
          #....###..
          #OO..#....
      ROCKS_MAP
      )

      expect(rocks_map.geography).to eq(
        [
          ["O", ".", ".", ".", ".", "#", ".", ".", ".", "."],
          ["O", ".", "O", "O", "#", ".", ".", ".", ".", "#"],
          [".", ".", ".", ".", ".", "#", "#", ".", ".", "."],
          ["O", "O", ".", "#", "O", ".", ".", ".", ".", "O"],
          [".", "O", ".", ".", ".", ".", ".", "O", "#", "."],
          ["O", ".", "#", ".", ".", "O", ".", "#", ".", "#"],
          [".", ".", "O", ".", ".", "#", "O", ".", ".", "O"],
          [".", ".", ".", ".", ".", ".", ".", "O", ".", "."],
          ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
          ["#", "O", "O", ".", ".", "#", ".", ".", ".", "."],
        ],
      )
    end
  end

  describe ".tilt" do
    it "moves all rocks that can move in ONCE in the either north or south direction" do
      rocks_map = RocksMap.new(
        <<~ROCKS_MAP,
          O....#....
          O.OO#....#
          .....##...
          OO.#O....O
          .O.....O#.
          O.#..O.#.#
          ..O..#O..O
          .......O..
          #....###..
          #OO..#....
      ROCKS_MAP
      )

      expect(rocks_map.tilt(:north).geography).to eq(
        [
          ["O", ".", "O", "O", ".", "#", ".", ".", ".", "."],
          ["O", ".", ".", ".", "#", ".", ".", ".", ".", "#"],
          ["O", "O", ".", ".", "O", "#", "#", ".", ".", "O"],
          [".", "O", ".", "#", ".", ".", ".", "O", ".", "."],
          ["O", ".", ".", ".", ".", "O", ".", ".", "#", "."],
          [".", ".", "#", ".", ".", ".", "O", "#", ".", "#"],
          [".", ".", "O", ".", ".", "#", ".", "O", ".", "O"],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          ["#", "O", "O", ".", ".", "#", "#", "#", ".", "."],
          ["#", ".", ".", ".", ".", "#", ".", ".", ".", "."],
        ],
      )

      expect(rocks_map.tilt(:west).geography).to eq(
        [
          ["O", "O", "O", ".", ".", "#", ".", ".", ".", "."],
          ["O", ".", ".", ".", "#", ".", ".", ".", ".", "#"],
          ["O", "O", ".", "O", ".", "#", "#", ".", "O", "."],
          ["O", ".", ".", "#", ".", ".", "O", ".", ".", "."],
          ["O", ".", ".", ".", "O", ".", ".", ".", "#", "."],
          [".", ".", "#", ".", ".", "O", ".", "#", ".", "#"],
          [".", "O", ".", ".", ".", "#", "O", ".", "O", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          ["#", "O", "O", ".", ".", "#", "#", "#", ".", "."],
          ["#", ".", ".", ".", ".", "#", ".", ".", ".", "."],
        ],
      )

      expect(rocks_map.tilt(:south).geography).to eq(
        [
          [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
          ["O", "O", "O", ".", "#", ".", ".", ".", ".", "#"],
          ["O", ".", ".", "O", ".", "#", "#", ".", ".", "."],
          ["O", "O", ".", "#", ".", ".", ".", ".", "O", "."],
          ["O", ".", ".", ".", ".", ".", "O", ".", "#", "."],
          ["O", ".", "#", ".", "O", "O", ".", "#", ".", "#"],
          [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
          [".", "O", ".", ".", ".", ".", "O", ".", "O", "."],
          ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
          ["#", "O", "O", ".", ".", "#", ".", ".", ".", "."],
        ],
      )

      expect(rocks_map.tilt(:east).geography).to eq(
        [
          [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
          [".", "O", "O", "O", "#", ".", ".", ".", ".", "#"],
          [".", "O", ".", ".", "O", "#", "#", ".", ".", "."],
          [".", "O", "O", "#", ".", ".", ".", ".", ".", "O"],
          [".", "O", ".", ".", ".", ".", ".", "O", "#", "."],
          [".", "O", "#", ".", ".", "O", "O", "#", ".", "#"],
          [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
          [".", ".", "O", ".", ".", ".", ".", "O", ".", "O"],
          ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
          ["#", ".", "O", "O", ".", "#", ".", ".", ".", "."],
        ],
      )
    end
  end

  describe ".tilt_all_the_way" do
    it "moves all rocks that can move in ALL THE WAY in the provided direction" do
      rocks_map = RocksMap.new(
        <<~ROCKS_MAP,
          O....#....
          O.OO#....#
          .....##...
          OO.#O....O
          .O.....O#.
          O.#..O.#.#
          ..O..#O..O
          .......O..
          #....###..
          #OO..#....
      ROCKS_MAP
      )

      expect(rocks_map.tilt_all_the_way(:north).geography).to eq(
        [
          ["O", "O", "O", "O", ".", "#", ".", "O", ".", "."],
          ["O", "O", ".", ".", "#", ".", ".", ".", ".", "#"],
          ["O", "O", ".", ".", "O", "#", "#", ".", ".", "O"],
          ["O", ".", ".", "#", ".", "O", "O", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
          [".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
          [".", ".", "O", ".", ".", "#", ".", "O", ".", "O"],
          [".", ".", "O", ".", ".", ".", ".", ".", ".", "."],
          ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
          ["#", ".", ".", ".", ".", "#", ".", ".", ".", "."],
        ],
      )
    end
  end

  describe ".spin_cycle" do
    it "tilts the board north, west, south, east" do
      rocks_map = RocksMap.new(
        <<~ROCKS_MAP,
          O....#....
          O.OO#....#
          .....##...
          OO.#O....O
          .O.....O#.
          O.#..O.#.#
          ..O..#O..O
          .......O..
          #....###..
          #OO..#....
      ROCKS_MAP
      )

      expect(rocks_map.spin_cycle.geography).to eq(
        [
          [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
          [".", ".", ".", ".", "#", ".", ".", ".", "O", "#"],
          [".", ".", ".", "O", "O", "#", "#", ".", ".", "."],
          [".", "O", "O", "#", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "O", "O", "O", "#", "."],
          [".", "O", "#", ".", ".", ".", "O", "#", ".", "#"],
          [".", ".", ".", ".", "O", "#", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", "O", "O", "O", "O"],
          ["#", ".", ".", ".", "O", "#", "#", "#", ".", "."],
          ["#", ".", ".", "O", "O", "#", ".", ".", ".", "."],
        ],
      )
    end
  end

  describe ".reset" do
    it "resets the rocks_map to its initial position" do
      rocks_map = RocksMap.new(
        <<~ROCKS_MAP,
          O....#....
          O.OO#....#
          .....##...
          OO.#O....O
          .O.....O#.
          O.#..O.#.#
          ..O..#O..O
          .......O..
          #....###..
          #OO..#....
      ROCKS_MAP
      )

      expect(rocks_map.tilt(:north).geography).to eq(
        [
          ["O", ".", "O", "O", ".", "#", ".", ".", ".", "."],
          ["O", ".", ".", ".", "#", ".", ".", ".", ".", "#"],
          ["O", "O", ".", ".", "O", "#", "#", ".", ".", "O"],
          [".", "O", ".", "#", ".", ".", ".", "O", ".", "."],
          ["O", ".", ".", ".", ".", "O", ".", ".", "#", "."],
          [".", ".", "#", ".", ".", ".", "O", "#", ".", "#"],
          [".", ".", "O", ".", ".", "#", ".", "O", ".", "O"],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          ["#", "O", "O", ".", ".", "#", "#", "#", ".", "."],
          ["#", ".", ".", ".", ".", "#", ".", ".", ".", "."],
        ],
      )

      expect(rocks_map.reset.geography).to eq(
        [
          ["O", ".", ".", ".", ".", "#", ".", ".", ".", "."],
          ["O", ".", "O", "O", "#", ".", ".", ".", ".", "#"],
          [".", ".", ".", ".", ".", "#", "#", ".", ".", "."],
          ["O", "O", ".", "#", "O", ".", ".", ".", ".", "O"],
          [".", "O", ".", ".", ".", ".", ".", "O", "#", "."],
          ["O", ".", "#", ".", ".", "O", ".", "#", ".", "#"],
          [".", ".", "O", ".", ".", "#", "O", ".", ".", "O"],
          [".", ".", ".", ".", ".", ".", ".", "O", ".", "."],
          ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
          ["#", "O", "O", ".", ".", "#", ".", ".", ".", "."],
        ],
      )
    end
  end
end
